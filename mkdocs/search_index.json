{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to ECE 420\n\n\n\n\nCourse Description\n\n\nThe first seven weeks of the course will be structured labs based on fundamental digital signal processing (DSP) concepts from ECE 310. The next two weeks will be on the implementation and simulation of a fundamental DSP algorithm of a student's choosing from a set of seminal DSP papers (such as adaptive filtering, pitch detection, edge-aware filtering, motion tracking, pattern recognition, etc). The remaining six weeks in the course will revolve around the development, testing, and documentation of a DSP project of the student's choice (subject to instructor approval).\n\n\nCourse Goals\n\n\nStudents will learn to prototype, implement, and analyze real-time DSP systems. Students will both broaden and deepen their understanding of basic DSP theory and techniques and learn to relate this understanding to real-world observations and applications. Students will learn industrially-relevant skills such as rapid design prototyping in Python, and Android development of DSP applications for computationally-constrained mobile devices. Other significant educational experiences include open-ended design, oral, and written communication, and team projects.\n\n\nCourse Schedule\n\n\nLectures are once a week on Monday from 2:00-2:50pm in 4070 ECEB.\n\n\n\n\n\n\n\n\nWeek of\n\n\nLecture Topic\n\n\nLab\n\n\nDue (in lab)\n\n\n\n\n\n\n\n\n\n\n01/16\n\n\nNo lecture - MLK Day\n\n\nLab 1 - IMU Pedometer\n\n\nNone\n\n\n\n\n\n\n01/23\n\n\nTBA\n\n\nLab 2 - Spectrogram\n\n\nPrelab 2, Demo and Quiz 1\n\n\n\n\n\n\n01/30\n\n\nTBA\n\n\nLab 3 - Real-time Audio Filtering\n\n\nPrelab 3, Demo and Quiz 2\n\n\n\n\n\n\n02/06\n\n\nTBA\n\n\nLab 4 - Pitch Detection\n\n\nPrelab 4, Demo and Quiz 3\n\n\n\n\n\n\n02/13\n\n\nTBA\n\n\nLab 5 - Autotune\n\n\nPrelab 5, Demo and Quiz 4\n\n\n\n\n\n\n02/20\n\n\nTBA\n\n\nLab 6 - Image Processing\n\n\nPrelab 6, Demo and Quiz 5\n\n\n\n\n\n\n02/27\n\n\nTBA\n\n\nLab 7 - Video Processing\n\n\nPrelab 7, Demo and Quiz 6\n\n\n\n\n\n\n03/06\n\n\nTBA\n\n\nAssigned Project Lab\n\n\nDemo and Quiz 7, Final Project Proposal\n\n\n\n\n\n\n03/13\n\n\nTBA\n\n\nAssigned Project Lab\n\n\nAssigned Project Demo\n\n\n\n\n\n\n03/20\n\n\nSpring Break\n\n\n\n\n\n\n\n\n\n\n03/27\n\n\nTBA\n\n\nDesign Review\n\n\nRevised Project Proposal due by end of week\n\n\n\n\n\n\n04/03\n\n\nTBA\n\n\nFinal Project\n\n\nMilestone 1\n\n\n\n\n\n\n04/10\n\n\nTBA\n\n\nFinal Project\n\n\nMilestone 2\n\n\n\n\n\n\n04/17\n\n\nTBA\n\n\nFinal Project\n\n\nMilestone 3\n\n\n\n\n\n\n04/24\n\n\nTBA\n\n\nFinal Project Presentations\n\n\nFinal Demo\n\n\n\n\n\n\n05/01\n\n\nNo lecture - Finals!\n\n\nNo labs\n\n\nFinal Project Report due by Reading Day\n\n\n\n\n\n\n\n\nLabs\n\n\nLabs are held in Room 5072 ECEB.\n\n\n\n\nSection ABA meets Tuesday, 2:00-3:50 PM.\n\n\nSection ABC meets Wednesday, 2:00-3:50 PM.\n\n\nSection ABD meets Thursday, 2:00-3:50 PM.\n\n\nSection ABE meets Friday, 2:00-3:50 PM.\n\n\n\n\nWorking code is due the same day as the quiz.\n\n\nThe lab is available at all times except University holiday weekends and ECE 420 class times.\n\n\nStudents are expected to be in the lab for their two-hour assigned lab period. In addition, students can access the lab at any time (subject to departmental rules for normal lab privileges) using their I-card. It is expected that students will require additional lab time to complete their assignments. ECE 420 students having difficulty with their I-card access should notify one of the teaching assistants.\n\n\nBasic rules of courtesy and professional behavior are expected in the lab. Please do not remove any lab equipment, books, or manuals from the lab at any time. If you would like to listen to music as you work, please use headphones.\n\n\n\n\n\n\n\n\nAcademic Integrity Policy\n\n\nPrinted and online sources are allowed with proper citation. Please direct your question to Google or the course staff before you ask your classmates. Given the range of the material for this course, we encourage you to refer to any online source, but do not directly copy and paste.\n\n\nWe do not allow inter-group cooperation for the final project. If there is a sign of cooperation between groups, those groups will be treated as a big group, and the grade will be divided accordingly.\n\n\nMore information: \nStudent Code\n.\n\n\nOffice Hours / Course Administrivia\n\n\n\n\nProf. Minh Do: TBD\n\n\nTA Dario Aranguiz: TBD\n\n\nTA Trong Nguyen: TBD\n\n\nTA Dongbo Wang: TBD\n\n\n\n\nIf you have questions, post it on \nPiazza\n.\n\n\nInstructor Contact Information\n\n\n\n\nProf. Minh Do:  minhdo AT illinois DOT edu\n\n\nTA Dario Aranguiz: arangui2 AT illinois DOT edu\n\n\nTA Trong Nguyen: tnnguyn2 AT illinois DOT edu\n\n\nTA Dongbo Wang: dwang49 AT illinois DOT edu",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-ece-420",
            "text": "",
            "title": "Welcome to ECE 420"
        },
        {
            "location": "/#course-description",
            "text": "The first seven weeks of the course will be structured labs based on fundamental digital signal processing (DSP) concepts from ECE 310. The next two weeks will be on the implementation and simulation of a fundamental DSP algorithm of a student's choosing from a set of seminal DSP papers (such as adaptive filtering, pitch detection, edge-aware filtering, motion tracking, pattern recognition, etc). The remaining six weeks in the course will revolve around the development, testing, and documentation of a DSP project of the student's choice (subject to instructor approval).",
            "title": "Course Description"
        },
        {
            "location": "/#course-goals",
            "text": "Students will learn to prototype, implement, and analyze real-time DSP systems. Students will both broaden and deepen their understanding of basic DSP theory and techniques and learn to relate this understanding to real-world observations and applications. Students will learn industrially-relevant skills such as rapid design prototyping in Python, and Android development of DSP applications for computationally-constrained mobile devices. Other significant educational experiences include open-ended design, oral, and written communication, and team projects.",
            "title": "Course Goals"
        },
        {
            "location": "/#course-schedule",
            "text": "Lectures are once a week on Monday from 2:00-2:50pm in 4070 ECEB.     Week of  Lecture Topic  Lab  Due (in lab)      01/16  No lecture - MLK Day  Lab 1 - IMU Pedometer  None    01/23  TBA  Lab 2 - Spectrogram  Prelab 2, Demo and Quiz 1    01/30  TBA  Lab 3 - Real-time Audio Filtering  Prelab 3, Demo and Quiz 2    02/06  TBA  Lab 4 - Pitch Detection  Prelab 4, Demo and Quiz 3    02/13  TBA  Lab 5 - Autotune  Prelab 5, Demo and Quiz 4    02/20  TBA  Lab 6 - Image Processing  Prelab 6, Demo and Quiz 5    02/27  TBA  Lab 7 - Video Processing  Prelab 7, Demo and Quiz 6    03/06  TBA  Assigned Project Lab  Demo and Quiz 7, Final Project Proposal    03/13  TBA  Assigned Project Lab  Assigned Project Demo    03/20  Spring Break      03/27  TBA  Design Review  Revised Project Proposal due by end of week    04/03  TBA  Final Project  Milestone 1    04/10  TBA  Final Project  Milestone 2    04/17  TBA  Final Project  Milestone 3    04/24  TBA  Final Project Presentations  Final Demo    05/01  No lecture - Finals!  No labs  Final Project Report due by Reading Day",
            "title": "Course Schedule"
        },
        {
            "location": "/#labs",
            "text": "Labs are held in Room 5072 ECEB.   Section ABA meets Tuesday, 2:00-3:50 PM.  Section ABC meets Wednesday, 2:00-3:50 PM.  Section ABD meets Thursday, 2:00-3:50 PM.  Section ABE meets Friday, 2:00-3:50 PM.   Working code is due the same day as the quiz.  The lab is available at all times except University holiday weekends and ECE 420 class times.  Students are expected to be in the lab for their two-hour assigned lab period. In addition, students can access the lab at any time (subject to departmental rules for normal lab privileges) using their I-card. It is expected that students will require additional lab time to complete their assignments. ECE 420 students having difficulty with their I-card access should notify one of the teaching assistants.  Basic rules of courtesy and professional behavior are expected in the lab. Please do not remove any lab equipment, books, or manuals from the lab at any time. If you would like to listen to music as you work, please use headphones.",
            "title": "Labs"
        },
        {
            "location": "/#academic-integrity-policy",
            "text": "Printed and online sources are allowed with proper citation. Please direct your question to Google or the course staff before you ask your classmates. Given the range of the material for this course, we encourage you to refer to any online source, but do not directly copy and paste.  We do not allow inter-group cooperation for the final project. If there is a sign of cooperation between groups, those groups will be treated as a big group, and the grade will be divided accordingly.  More information:  Student Code .",
            "title": "Academic Integrity Policy"
        },
        {
            "location": "/#office-hours-course-administrivia",
            "text": "Prof. Minh Do: TBD  TA Dario Aranguiz: TBD  TA Trong Nguyen: TBD  TA Dongbo Wang: TBD   If you have questions, post it on  Piazza .",
            "title": "Office Hours / Course Administrivia"
        },
        {
            "location": "/#instructor-contact-information",
            "text": "Prof. Minh Do:  minhdo AT illinois DOT edu  TA Dario Aranguiz: arangui2 AT illinois DOT edu  TA Trong Nguyen: tnnguyn2 AT illinois DOT edu  TA Dongbo Wang: dwang49 AT illinois DOT edu",
            "title": "Instructor Contact Information"
        },
        {
            "location": "/lab1/",
            "text": "Lab 1\n\n\nIn this lab, you get familiarized with PyCharm and Android Studio development environment. Using a simple step detector as an example, you will write and debug your code in Python first, and later in Android.\n\n\nPeak detection in Python\n\n\nDownload \nPyCharm\n to your computer. If you are on your personal computer, you might apply for the \nEducational license\n. Install \nAnaconda\n Python distribution. The Python 3.5 distribution is used in this tutorial.\n\n\nSet up Python Interpreter in PyCharm.\n\n\n\n\n\n\nOpen PyCharm. Go to PyCharm Preferences\n\n\n\n\n\n\nGo to Project Interpreter. Navigate to Anaconda python path on your computer: \n/anaconda/bin/python\n on Mac or \nC:\\Users\\YourUserName\\anaconda\\bin\\python\n on Windows. Click OK.\n\n\n\n\n\n\nCreate a new Project in PyCharm.\n\n\n\n\n\n\nGo to File -\n New Project or Create New Project from the PyCharm Welcome Screen.\n\n\n\n\n\n\nPick a Pure Python project. Make sure the Interpreter is set to the Anaconda distribution.\n\n\n\n\n\n\nName your project \nlab1\n (or a name you prefer). Click OK.\n\n\n\n\n\n\nRight click the lab1 Navigation bar. Choose New -\n Python File. Name it \npeak_detection.py\n. Click OK.\n\n\n\n\n\n\n\n\nPlot the sensor data\n\n\nWe generated sample sensor data in the file  \nsample_sensor_data.csv\n.\nCopy \nsample_sensor_data.csv\n to your lab1 folder.\n\n\nIn the file \npeak_detection.py\n, type the following code (you may ignore line number 5):\n\n\n\n\nWe imported the necessary libraries (\nnumpy\n, \nmatplotlib\n and \nos\n) from lines 1 to 3. If your csv file is not in the lab1 folder, you can use \nos.chdir()\n to navigate to the correct path like in line 5.\n\n\nThe accelerometer and gyroscope data are extracted in line 11 and 12. The time vector is extracted in line 9. Let's plot the first axis of accelerometer data in line 14 and 15.\n\n\nRun your program\n\n\nRight click anywhere inside the code page and choose \nRun 'peak_detection'\n.\n\n\n\n\nThe plot is as follows:\n\n\n\n\nClose the figure to stop the program from running.\n\n\n\n\nAssignment 1\n\n\nGive your plot a title of \"First axis of accelerometer data\". Name your x-axis \"Time\" and your y-axis \"Meters per second.\n\n\nShow the TA when done.\n\n\n\n\nDebug your code\n\n\nClick on the space between the code the the line number on line 14 to set a break point (red circle).\n\n\n\n\nRight click inside the \npeak_detection.py\n or click on the Debug button on the top right corner of PyCharm (the bug symbol). The execution will stop at line 14.\n\n\nIn the Debug console, you can view all the variables currently created. If it is a numpy array, you can click on View as Array (at the end of the row) to view it as a table.\n \n\n\nDebug in the IPython Console\n\n\nWhile in the Debug mode, you can write code on the fly to test out your logic. Switch to the Console tab and choose Show Python Prompt (where the red arrow points to)\n\n\n\n\nThis is the python interactive console connected to your debugger. For example, let's find the maximum value of the accelerometer data in the console. Type \naccel_data[0].max()\n  in the console and press enter. It should give a value of \n12.507\n.\n\n\nMore info on how to step through your program \nhere\n.\n\n\nDefine your function\n\n\nNow let's define a \nfunction\n to find a peak in your signal.\nGo to the top of the function and define a function peak_detection on line 4. Please type the following lines:\n\n\n\n\nThe function accepts the time array \nt\n and the accelerometer data array \nsig\n.\n\n\nWe define a Python \nlist\n of peaks on line 5. For now we detect a single peak, the maximum value of our signal. We use a for loop (line 8) to traverse through the our array \nsig\n. Initially, the \nmax_val\n is set to minus infinity (why?). Every time we encounter a greater value than \nmax_val\n (line 9), we record this value and its time position (line 10 and 11).\n\n\n\n\nTip\n\n\nPython relies on \nindentation\n to differentiate different parts of the code.\n\n\n\n\nThe position and the maximum value are appended to the list of \npeaks\n in line 13. In line 14, we turn our list to numpy array for plotting and return it to the calling function.\n\n\nNow that we define our function, we can call it and plot our peak.\nAdd this line before the plot function:\n\n\nmax_peaks = peak_detection(timestamps, accel_data[0])\n\n\n\n\nAdd this line of code after the plot function (line 14).\n\n\nplt.scatter(max_peaks[:,0], max_peaks[:,1], color = 'red')\n\n\n\n\n\n\nQuestion\n\n\nWhat is the dimension of max_peaks?\n\n\n\n\nNow run or debug your program. You should see a red peak overlaid onto the signal.\n\n\n\n\n\n\nAssignment 2\n\n\nModify the \npeak_detection\n function to detect other peaks in the signal. Add the new peaks and time positions to our \npeaks\n list. The function should accept a new input parameter \nthresh\n (peaks should have value greater than \nthresh\n).\n\n\nRename your python file to \nfirstname_lastName.py\n when you submit it.\n\n\nHere is a sample output:\n\n\n\n\n\n\nAndroid Studio development\n\n\nDownload \nAndroid Studio\n. On the Welcome Screen, click Configure -\n SDK Manager.\n\n\n\n\nSwitch to tab SDK tools, and check the boxes as in the figure below. These will install the requisite Java SDK, C++ NDK, and debugging tools. Click OK to install.\n\n\n\n\nChoose Open an existing Android Project. Navigate to the lab1 project. It might take a few seconds for Android Studio to index the files and configurations.\n\n\n.\n\n\nExplore the Project\n\n\nChoose the Android tab from the Project Sidebar. Expand the \njava\n and \nres\n folder. Double click on the \nactivity_pedometer_simple.xml\n in the \nres/layout\n folder.\n\n\n\n\nOur user interface consists of a label which says \"Hello world!\" and a \nGraphView\n to display our pedometer signal. Click on the text label, in the popped out Properties tool bar, change the text from \"Hello World!\" to \"Steps Detected\". Save your changes.\n\n\n\n\nDrag two buttons from the Widgets in the Palette View on the left side into our \nPedometerSimple\n layout.\n\n\n\n\nSwitch to the Text view (at the bottom left, next to Design tab) to edit the layout of our user interface in xml.\n\n\n\n\nThe above xml view is before the buttons are added.\n\n\n\n\n\n\nRight click on the line \nandroid:id=\"@+id/button\"\n and choose Refactor-\nRename, and rename it to \nbuttonStart\n. Notice that all of the references to button change to \nbuttonStart\n.\n\n\n\n\n\n\nChange the text of the Buttons to \"Start!\" and \"Stop!\" (in the android:text properties). And change the \nandroid:id\n of the Stop Button to \nbuttonStop\n.\n\n\n\n\n\n\nSave the xml file and switch back the Design View to see your new design.\n\n\n\n\n\n\nButton event listener\n\n\nNavigate to \njava\n folder. Expand \ncom.ece420.lab1\n and open \nPedometerSimple.java\n.\n\n\nA \nTextView\n named \ntextStatus\n and a \nButton\n named \nbuttonStart\n are declared in line 25 and 26. We connect those two variables to the user interface components in line 43 to 44.\n\n\nWhen you press the Start Button, the code from line 49 to 57 will run. These are event handlers for the button click event. We start our data collection using the \nSensorReader.startCollection()\n function and change the label \ntextStatus\n to \n\"Started\"\n.\n\n\n\n\nAssignment 3\n\n\nCreate a variable named \nbuttonStop\n (of class \nButton\n) and connect this variable to the \nbuttonStop\n UI element by using the function \nfindViewById\n.\n\n\nUnder the \nbuttonStart.setOnClickListener()\n event handler, write the event handler for the \nbuttonStop\n click event as follows:\n\n\nIf the \nsensorsOn\n variable is \ntrue\n, set it to \nfalse\n and call the \nStopCollection()\n function on the \nmSensorReader\n class instance. Also set the \ntextStatus\n label to \"\nStopped!\"\n.\n\n\nQuestion\n : What do \nonResume()\n and \nonPause()\n function do?\n\n\nPlease ask your TA to check your answers before continuing the next part.\n\n\n\n\nPlotting the sensor data\n\n\nLine 78 to 86 is where we connect our Plotting Control (GraphView) in the user interface to our java code. (your line number might change. See the figure below)\n\n\n\n\nSince Android 6.0, Android apps request permissions when they are running, not when they are installed. In our code, we asked for permissions to read and write to the external storage. (line 89 to line 99).\n\n\n\n\nDeveloper mode on the SHIELD tablet.\n\n\nFrom the home screen of your tablet, swipe down twice and choose the Settings icon. Scroll down to the About Tablet setting. Inside the About Tablet setting, find the Build Number item. Tap \n7\n times, and there will be notifications informing that you are now a developer.\n\n\nGo back to the main Settings menu, and choose the Developer options. Turn on the USB debugging.\nConnect your tablet to your computer via USB. Say yes to the \nrsa-fingerprint\n notification.\n\n\nIf you are on Windows, you may need to install the OEM USB Drivers for your device. See \nthis page\n for help if your device is not automatically recognized.\n\n\nRun the step detector app\n\n\nGo to the \nRun\n menu and choose \nRun app\n. This will handle building the Android target and uploading the APK to the device.\n\n\nChoose the \nNVIDIA SHIELD TABLET\n when the Select Deployment Target screen appears. Your application will display a continuous stream of sensor data and the estimated number of steps based on the accelerometer readings.\n\n\n\n\n\n\n\n\n\nDebugging your app.\n\n\nOpen \nStepDetector.java\n. Set a breakpoint at line 53 (click on the space next to the line number). In the \nRun\n menu, choose \nDebug app\n (or choose the Debug app symbol in the toolbar). Notice the similarity between PyCharm and Android Studio debugging mode.\n\n\nOnce your app shows up, press the Start button on the tablet to begin recording data.\n\n\n\n\nAndroid Studio has multiple ways to step through code. For now, click \nStep Over\n to move the code to the next line.\n\n\nSwitch to the Android Monitor tab. You can see the output of the \nLog.d()\n function in this window. Android's \nLog function\n is a useful tool for debugging and monitoring your app.\n\n\nIn the Android Monitor view, type \nSTEP_DETECTOR\n (the \nTAG\n that we used in the \nLog\n function) in the search field and press Enter to filter out other \nLog\n outputs.\n\n\nGo back to the Debug mode, remove the breakpoint (click on the red circle) and click \nResume\n (the play button in the left column).\n\n\nNow switch back to the Android Monitor Window. Observe that whenever the code detects a peak, the Android Monitor shows the output of our \nLog\n function, which is every time the accelerometer value is greater than \nACCEL_THRESHOLD\n (line 52).\n\n\nUnderstanding the StepDetector class\n\n\nThe \nStepDetector\n class detects peaks for an online stream of data. It stores the accelerometer values in the \naccelBuffer\n list. The buffer has a size of \nN_SAMPLES = 11\n.\n\n\n\n\nQuestion\n\n\nWhat does \ntimeSinceLastStep\n do?\n\n\n\n\nTurn in your assignments\n\n\nPlease send your Python peak detection code (Assignment 2) to all of the TAs.\nName your file \nfirstname_lastName.py\n. These should be submitted individually.",
            "title": "Lab 1 - IMU Pedometer"
        },
        {
            "location": "/lab1/#lab-1",
            "text": "In this lab, you get familiarized with PyCharm and Android Studio development environment. Using a simple step detector as an example, you will write and debug your code in Python first, and later in Android.",
            "title": "Lab 1"
        },
        {
            "location": "/lab1/#peak-detection-in-python",
            "text": "Download  PyCharm  to your computer. If you are on your personal computer, you might apply for the  Educational license . Install  Anaconda  Python distribution. The Python 3.5 distribution is used in this tutorial.",
            "title": "Peak detection in Python"
        },
        {
            "location": "/lab1/#set-up-python-interpreter-in-pycharm",
            "text": "Open PyCharm. Go to PyCharm Preferences    Go to Project Interpreter. Navigate to Anaconda python path on your computer:  /anaconda/bin/python  on Mac or  C:\\Users\\YourUserName\\anaconda\\bin\\python  on Windows. Click OK.",
            "title": "Set up Python Interpreter in PyCharm."
        },
        {
            "location": "/lab1/#create-a-new-project-in-pycharm",
            "text": "Go to File -  New Project or Create New Project from the PyCharm Welcome Screen.    Pick a Pure Python project. Make sure the Interpreter is set to the Anaconda distribution.    Name your project  lab1  (or a name you prefer). Click OK.    Right click the lab1 Navigation bar. Choose New -  Python File. Name it  peak_detection.py . Click OK.",
            "title": "Create a new Project in PyCharm."
        },
        {
            "location": "/lab1/#plot-the-sensor-data",
            "text": "We generated sample sensor data in the file   sample_sensor_data.csv .\nCopy  sample_sensor_data.csv  to your lab1 folder.  In the file  peak_detection.py , type the following code (you may ignore line number 5):   We imported the necessary libraries ( numpy ,  matplotlib  and  os ) from lines 1 to 3. If your csv file is not in the lab1 folder, you can use  os.chdir()  to navigate to the correct path like in line 5.  The accelerometer and gyroscope data are extracted in line 11 and 12. The time vector is extracted in line 9. Let's plot the first axis of accelerometer data in line 14 and 15.",
            "title": "Plot the sensor data"
        },
        {
            "location": "/lab1/#run-your-program",
            "text": "Right click anywhere inside the code page and choose  Run 'peak_detection' .   The plot is as follows:   Close the figure to stop the program from running.   Assignment 1  Give your plot a title of \"First axis of accelerometer data\". Name your x-axis \"Time\" and your y-axis \"Meters per second.  Show the TA when done.",
            "title": "Run your program"
        },
        {
            "location": "/lab1/#debug-your-code",
            "text": "Click on the space between the code the the line number on line 14 to set a break point (red circle).   Right click inside the  peak_detection.py  or click on the Debug button on the top right corner of PyCharm (the bug symbol). The execution will stop at line 14.  In the Debug console, you can view all the variables currently created. If it is a numpy array, you can click on View as Array (at the end of the row) to view it as a table.",
            "title": "Debug your code"
        },
        {
            "location": "/lab1/#debug-in-the-ipython-console",
            "text": "While in the Debug mode, you can write code on the fly to test out your logic. Switch to the Console tab and choose Show Python Prompt (where the red arrow points to)   This is the python interactive console connected to your debugger. For example, let's find the maximum value of the accelerometer data in the console. Type  accel_data[0].max()   in the console and press enter. It should give a value of  12.507 .  More info on how to step through your program  here .",
            "title": "Debug in the IPython Console"
        },
        {
            "location": "/lab1/#define-your-function",
            "text": "Now let's define a  function  to find a peak in your signal.\nGo to the top of the function and define a function peak_detection on line 4. Please type the following lines:   The function accepts the time array  t  and the accelerometer data array  sig .  We define a Python  list  of peaks on line 5. For now we detect a single peak, the maximum value of our signal. We use a for loop (line 8) to traverse through the our array  sig . Initially, the  max_val  is set to minus infinity (why?). Every time we encounter a greater value than  max_val  (line 9), we record this value and its time position (line 10 and 11).   Tip  Python relies on  indentation  to differentiate different parts of the code.   The position and the maximum value are appended to the list of  peaks  in line 13. In line 14, we turn our list to numpy array for plotting and return it to the calling function.  Now that we define our function, we can call it and plot our peak.\nAdd this line before the plot function:  max_peaks = peak_detection(timestamps, accel_data[0])  Add this line of code after the plot function (line 14).  plt.scatter(max_peaks[:,0], max_peaks[:,1], color = 'red')   Question  What is the dimension of max_peaks?   Now run or debug your program. You should see a red peak overlaid onto the signal.    Assignment 2  Modify the  peak_detection  function to detect other peaks in the signal. Add the new peaks and time positions to our  peaks  list. The function should accept a new input parameter  thresh  (peaks should have value greater than  thresh ).  Rename your python file to  firstname_lastName.py  when you submit it.  Here is a sample output:",
            "title": "Define your function"
        },
        {
            "location": "/lab1/#android-studio-development",
            "text": "Download  Android Studio . On the Welcome Screen, click Configure -  SDK Manager.   Switch to tab SDK tools, and check the boxes as in the figure below. These will install the requisite Java SDK, C++ NDK, and debugging tools. Click OK to install.   Choose Open an existing Android Project. Navigate to the lab1 project. It might take a few seconds for Android Studio to index the files and configurations.  .",
            "title": "Android Studio development"
        },
        {
            "location": "/lab1/#explore-the-project",
            "text": "Choose the Android tab from the Project Sidebar. Expand the  java  and  res  folder. Double click on the  activity_pedometer_simple.xml  in the  res/layout  folder.   Our user interface consists of a label which says \"Hello world!\" and a  GraphView  to display our pedometer signal. Click on the text label, in the popped out Properties tool bar, change the text from \"Hello World!\" to \"Steps Detected\". Save your changes.   Drag two buttons from the Widgets in the Palette View on the left side into our  PedometerSimple  layout.   Switch to the Text view (at the bottom left, next to Design tab) to edit the layout of our user interface in xml.   The above xml view is before the buttons are added.    Right click on the line  android:id=\"@+id/button\"  and choose Refactor- Rename, and rename it to  buttonStart . Notice that all of the references to button change to  buttonStart .    Change the text of the Buttons to \"Start!\" and \"Stop!\" (in the android:text properties). And change the  android:id  of the Stop Button to  buttonStop .    Save the xml file and switch back the Design View to see your new design.",
            "title": "Explore the Project"
        },
        {
            "location": "/lab1/#button-event-listener",
            "text": "Navigate to  java  folder. Expand  com.ece420.lab1  and open  PedometerSimple.java .  A  TextView  named  textStatus  and a  Button  named  buttonStart  are declared in line 25 and 26. We connect those two variables to the user interface components in line 43 to 44.  When you press the Start Button, the code from line 49 to 57 will run. These are event handlers for the button click event. We start our data collection using the  SensorReader.startCollection()  function and change the label  textStatus  to  \"Started\" .   Assignment 3  Create a variable named  buttonStop  (of class  Button ) and connect this variable to the  buttonStop  UI element by using the function  findViewById .  Under the  buttonStart.setOnClickListener()  event handler, write the event handler for the  buttonStop  click event as follows:  If the  sensorsOn  variable is  true , set it to  false  and call the  StopCollection()  function on the  mSensorReader  class instance. Also set the  textStatus  label to \" Stopped!\" .  Question  : What do  onResume()  and  onPause()  function do?  Please ask your TA to check your answers before continuing the next part.",
            "title": "Button event listener"
        },
        {
            "location": "/lab1/#plotting-the-sensor-data",
            "text": "Line 78 to 86 is where we connect our Plotting Control (GraphView) in the user interface to our java code. (your line number might change. See the figure below)   Since Android 6.0, Android apps request permissions when they are running, not when they are installed. In our code, we asked for permissions to read and write to the external storage. (line 89 to line 99).",
            "title": "Plotting the sensor data"
        },
        {
            "location": "/lab1/#developer-mode-on-the-shield-tablet",
            "text": "From the home screen of your tablet, swipe down twice and choose the Settings icon. Scroll down to the About Tablet setting. Inside the About Tablet setting, find the Build Number item. Tap  7  times, and there will be notifications informing that you are now a developer.  Go back to the main Settings menu, and choose the Developer options. Turn on the USB debugging.\nConnect your tablet to your computer via USB. Say yes to the  rsa-fingerprint  notification.  If you are on Windows, you may need to install the OEM USB Drivers for your device. See  this page  for help if your device is not automatically recognized.",
            "title": "Developer mode on the SHIELD tablet."
        },
        {
            "location": "/lab1/#run-the-step-detector-app",
            "text": "Go to the  Run  menu and choose  Run app . This will handle building the Android target and uploading the APK to the device.  Choose the  NVIDIA SHIELD TABLET  when the Select Deployment Target screen appears. Your application will display a continuous stream of sensor data and the estimated number of steps based on the accelerometer readings.",
            "title": "Run the step detector app"
        },
        {
            "location": "/lab1/#debugging-your-app",
            "text": "Open  StepDetector.java . Set a breakpoint at line 53 (click on the space next to the line number). In the  Run  menu, choose  Debug app  (or choose the Debug app symbol in the toolbar). Notice the similarity between PyCharm and Android Studio debugging mode.  Once your app shows up, press the Start button on the tablet to begin recording data.   Android Studio has multiple ways to step through code. For now, click  Step Over  to move the code to the next line.  Switch to the Android Monitor tab. You can see the output of the  Log.d()  function in this window. Android's  Log function  is a useful tool for debugging and monitoring your app.  In the Android Monitor view, type  STEP_DETECTOR  (the  TAG  that we used in the  Log  function) in the search field and press Enter to filter out other  Log  outputs.  Go back to the Debug mode, remove the breakpoint (click on the red circle) and click  Resume  (the play button in the left column).  Now switch back to the Android Monitor Window. Observe that whenever the code detects a peak, the Android Monitor shows the output of our  Log  function, which is every time the accelerometer value is greater than  ACCEL_THRESHOLD  (line 52).",
            "title": "Debugging your app."
        },
        {
            "location": "/lab1/#understanding-the-stepdetector-class",
            "text": "The  StepDetector  class detects peaks for an online stream of data. It stores the accelerometer values in the  accelBuffer  list. The buffer has a size of  N_SAMPLES = 11 .   Question  What does  timeSinceLastStep  do?",
            "title": "Understanding the StepDetector class"
        },
        {
            "location": "/lab1/#turn-in-your-assignments",
            "text": "Please send your Python peak detection code (Assignment 2) to all of the TAs.\nName your file  firstname_lastName.py . These should be submitted individually.",
            "title": "Turn in your assignments"
        },
        {
            "location": "/resources/python/",
            "text": "Python Resources\n\n\nGeneral\n\n\nThis website\n has a great set of cheat sheets for general Python knowledge.\n\n\nNumpy also has a great \nNumpy for Matlab users\n section which compares common MATLAB commands to their equivalent expressions in Numpy.\n\n\nMatplotlib has a tutorial on their \npyplot\n plotting system \nhere\n. Their syntax is generally the same as MATLAB's plotting syntax. but you prepend \nplt.\n to most commands. For example, a basic matplotlib plot looks like:\n\n\nimport matplotlib.pyplot as plt\n\nplt.plot([1, 2, 3, 4])\nplt.ylabel('some numbers')\nplt.show()\n\n\n\n\nLast but not least, the official \nPython docs\n should be your go-to for Python questions if the cheatsheets above aren't sufficient.\n\n\nDSP\n\n\nScipy's signal processing library documentation can be found \nhere\n.",
            "title": "Python"
        },
        {
            "location": "/resources/python/#python-resources",
            "text": "",
            "title": "Python Resources"
        },
        {
            "location": "/resources/python/#general",
            "text": "This website  has a great set of cheat sheets for general Python knowledge.  Numpy also has a great  Numpy for Matlab users  section which compares common MATLAB commands to their equivalent expressions in Numpy.  Matplotlib has a tutorial on their  pyplot  plotting system  here . Their syntax is generally the same as MATLAB's plotting syntax. but you prepend  plt.  to most commands. For example, a basic matplotlib plot looks like:  import matplotlib.pyplot as plt\n\nplt.plot([1, 2, 3, 4])\nplt.ylabel('some numbers')\nplt.show()  Last but not least, the official  Python docs  should be your go-to for Python questions if the cheatsheets above aren't sufficient.",
            "title": "General"
        },
        {
            "location": "/resources/python/#dsp",
            "text": "Scipy's signal processing library documentation can be found  here .",
            "title": "DSP"
        },
        {
            "location": "/resources/android/",
            "text": "Android Resources\n\n\nThe official \nAndroid documentation\n should always be your first stop for Android information. Their \"Building Your First App\" tutorial should be enough to learn the Android lifecycle and general project structure.\n\n\nGoogle also has an official \nAndroid Sensors Overview\n which discusses how to use all of the onboard sensors, including the accelerometer and gyroscope. Most of this code will be written for you already in Lab 1, but you may find this useful during your final project.\n\n\nJava is very similar to C/C++, but you may still find \nthis Java cheatsheet\n useful. Apologies for the horrid color scheme.\n\n\nIf you are interested in how the Android C++ NDK works, Google has a writeup \nhere\n.",
            "title": "Android"
        },
        {
            "location": "/resources/android/#android-resources",
            "text": "The official  Android documentation  should always be your first stop for Android information. Their \"Building Your First App\" tutorial should be enough to learn the Android lifecycle and general project structure.  Google also has an official  Android Sensors Overview  which discusses how to use all of the onboard sensors, including the accelerometer and gyroscope. Most of this code will be written for you already in Lab 1, but you may find this useful during your final project.  Java is very similar to C/C++, but you may still find  this Java cheatsheet  useful. Apologies for the horrid color scheme.  If you are interested in how the Android C++ NDK works, Google has a writeup  here .",
            "title": "Android Resources"
        }
    ]
}